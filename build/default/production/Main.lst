MPASM 5.87                          MAIN.ASM   10-14-2021  22:59:33         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;************************************************************************
                      00002 ;* Nom de fichier:  *
                      00003 ;* Date: XX-XX-XXXX *
                      00004 ;* *
                      00005 ;* Auteur:  *
                      00006 ;* Haute Ecole Louvain en Hainaut *
                      00007 ;************************************************************************
                      00008 ;* Fichiers nécessaires: aucun *
                      00009 ;************************************************************************
                      00010 ;* Notes: *
                      00011 ;************************************************************************
                      00012     list p=16F84, f=INHX8M ; directive pour definir le processeur
                      00013     list c=90, n=60 ; directives pour le listing
                      00014     #include <p16F84a.inc> ; incorporation variables spécifiqu
                            es
                      00001         LIST
                      00002 
                      00003 ;=============================================================
                            =============
                      00004 ; Build date : Jan 06 2020
                      00005 ;  MPASM PIC16F84A processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2020 Microchip Technology, All rights re
                            served
                      00008 ;=============================================================
                            =============
                      00009 
                      00209         LIST
                      00015     errorlevel -302 ; pas d'avertissements de bank
                      00016     errorlevel -305 ; pas d'avertissements de fdest
                      00017 
2007   3FF2           00018     __config _CP_OFF & _WDT_OFF & _PWRTE_ON & _HS_OSC
                      00019 
                      00020 ;*************************************************************
                            ***********
                      00021 ;* Définitions et Variables *
                      00022     #DEFINE led1_ON b'11111111' ;Define c'est comme déclarer d
                            es constantes
                      00023     #DEFINE led1_OFF b'00000000'
                      00024     #DEFINE Button_RB1_PRESSED  b'00000000'
                      00025     #DEFINE Button_RB1_RELEASED b'00000001'
                      00026     ; Quand y'a un # (devant include et define) c'est une dire
                            ctive de 
                      00027     ;précompilation càd que c'est pas le programme qui fait la
                             commande, c'est 
                      00028     ;une commande pour le compilateur
                      00029 ;*************************************************************
                            ***********
                      00030     cblock 0x020
                      00031 ; déclaration de variables
  00000020            00032 IS_LED_BLINKING,d1,d2,NB_BUTTON_CHECK
                      00033     endc   
                      00034  ;equ
                      00035 ;*************************************************************
MPASM 5.87                          MAIN.ASM   10-14-2021  22:59:33         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            ***********
                      00036 ;* Programme principal *
                      00037 ;*************************************************************
                            ***********
                      00038 
                      00039 ;    cpu equates (memory map)
                      00040     ;myPortB    equ    0x06 ;Definit l'addresse du portB quelq
                            ue soit la bank 
                      00041                             ;dans laquelle je me trouve j'ai l
                            e droit d'utiliser PORTB
                      00042     ;myPortA    equ    0x05 ;Definit l'addresse du portA
                      00043     ORG 0x000 ; vecteur reset
                      00044 ;*************************************************************
                            ***********
                      00045  
0000                  00046 START
                      00047     
                      00048 ;*************************************************************
                            ***********   
                      00049 ;Initialisation PortB et PortA p15
0000   1283           00050     BCF STATUS, RP0         ;on clear le bit 5 de STATUS, ce q
                            ui permet de selectionner bank0
0001   0186           00051     CLRF PORTB              ; initialise portB avec un clear d
                            es outputs
0002   0185           00052     CLRF PORTA
0003   1683           00053     BSF STATUS, RP0         ; On set le bit 5 de STATUS à 1, d
                            onc bank1 est selectionnée    
                      00054 ; Partie qui dit que RB7 à RB0 sont des outputs
0004   3000           00055     MOVLW 0x00              ;0x00 = hexa / b'0' = binaire / 0 
                            = decimal on doit préciser le système de numération
0005   0086           00056     MOVWF TRISB             ; on met 0x00 dans TRISB, ce qui m
                            et PORTB en output
                      00057 ;Partie qui dit que RA4 à RA0 sont des inputs
0006   3003           00058     MOVLW b'00000011'       ;1=input -> ici RA0 et RA1
0007   0085           00059     MOVWF TRISA             ;on met 1 dans trisA : input
                      00060     
0008   1283           00061     BCF STATUS, RP0         ;On repasse dans la bank0 pour pou
                            voir utiliser PORTA et B sans utiliser les trucs à la ligne 40
                      00062 ;*************************************************************
                            ***********
                      00063 ;*************************************************************
                            *********** 
                      00064 
                      00065 ;Boucle principale du projet
0009                  00066 MAIN
0009   2???           00067     CALL CHECK_RA0              ;On appelle le check du bouton
                             RA0
000A   2???           00068     CALL SHUT_THE_FUCK_UP       ;On appelle le check du bouton
                             RA1
000B   1820           00069     BTFSC IS_LED_BLINKING, 0    ;Skip l'instruction suivante s
                            i Is_Led_Blinking = 0 (donc si la led ne clignote pas) le prog
                            ramme fait juste boucler, attendant qu'on appuie sur un bouton
                      00070                                 ;Si is_led_blinking est à 1, o
                            n fait l'instruction du dessous
MPASM 5.87                          MAIN.ASM   10-14-2021  22:59:33         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000C   2???           00071     CALL BLINK_ALL_LEDS_ONCE    ;On fait clignoter les leds 1 
                            fois
000D   2???           00072     GOTO MAIN                   ;On boucle sur le main
                      00073     
                      00074 ;Toutes les opérations servant à utiliser le bouton RA0
                      00075 ;En gros tout ce bloc est un toggle sur is_led_blinking -> Si 
                            les leds sont éteintes et qu'on appuie, ça les fait clignoter,
                             
                      00076 ;et si elles clignotent et qu'on appuie ça les fixe, et si ell
                            es sont fixes, ça les refait clignoter
                      00077 ;Le bloc gère aussi le rebond du bouton
000E                  00078 CHECK_RA0                       ;Subroutine qui permet d'allum
                            er/éteindre la led
000E   1C05           00079     BTFSS PORTA,RA0             ;On teste les bits qu'on a dan
                            s f (donc PORTA), s'ils sont =1 on skip l'instruction suivante
                             immédiate et on va à celle d'après
000F   0008           00080     RETURN                      ;Return execute l'instruction 
                            après le call de la fonction CHECK_RA0
                      00081                                 ;Donc là si les bits PORTA = 0
                             on vient ici, si les bits PORTA = 1 on la saute
0010   1820           00082     BTFSC IS_LED_BLINKING,0     ;Skip l'instruction suivante s
                            i Is_Led_Blinking = 0 (donc si la led ne clignote pas)
0011   2???           00083     GOTO STOP_LED_BLINKING      ;Si is_led_blinking = 1, on at
                            térit sur cette instruction, donc on va à la subroutine stop_l
                            ed_blinking
0012                  00084 START_LED_BLINKING              
0012   2???           00085     CALL BOUNCING_BUTTON_SECURITY_RA0   ;Pour faire clignoter 
                            la led, on appelle la sub qui gère le rebond du bouton
0013   2???           00086     CALL SET_IS_LED_BLINKING            ;Puis on appelle la su
                            b qui met l'état de is_led_blinking à 1
0014   2???           00087     GOTO MAIN                           ;On va au Main
0015                  00088 STOP_LED_BLINKING
0015   2???           00089     CALL BOUNCING_BUTTON_SECURITY_RA0   ;Pour stopper le clign
                            otement, on appelle la sub qui gère le rebond du bouton
0016   2???           00090     CALL CLEAR_IS_LED_BLINKING          ;Puis on appelle la su
                            b qui met l'état de is_led_blinking à 0
0017   2???           00091     CALL LIGHT_ON_PORTB                 ;Puis on appelle la su
                            b qui allume toutes les leds
0018   2???           00092     GOTO MAIN                           ;On va au Main
                      00093     
0019                  00094 SHUT_THE_FUCK_UP
0019   1C85           00095     BTFSS PORTA,RA1                     ;On teste les bits qu'
                            on a dans f (donc PORTA), s'ils sont =1 on skip l'instruction 
                            suivante immédiate et on va à celle d'après
001A   0008           00096     RETURN                              ;Return execute l'inst
                            ruction après le call de la fonction Shut_the_fuck_up
001B   2???           00097     CALL BOUNCING_BUTTON_SECURITY_RA1   ;Pour stopper le clign
                            otement, on appelle la sub qui gère le rebond du bouton
001C   2???           00098     CALL CLEAR_IS_LED_BLINKING          ;Puis on appelle la su
                            b qui met l'état de is_led_blinking à 0
001D   2???           00099     CALL LIGHT_OFF_PORTB                ;Puis on appelle la su
                            b qui allume toutes les leds
001E   2???           00100     GOTO MAIN                           ;On va au Main
                      00101 
MPASM 5.87                          MAIN.ASM   10-14-2021  22:59:33         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00102 ;Allume puis éteint les leds, pendant le délais d'attente chec
                            k le bouton
001F                  00103 BLINK_ALL_LEDS_ONCE
001F   2???           00104     CALL LIGHT_ON_PORTB             ;On appelle la sub qui all
                            ume toutes les leds
0020   2???           00105     CALL DELAY_WITH_CHECK_BUTTON    ;On appelle la sub qui tem
                            porise en écoutant le bouton
0021   2???           00106     CALL LIGHT_OFF_PORTB            ;On appelle la sub qui éte
                            int toutes les leds
0022   2???           00107     CALL DELAY_WITH_CHECK_BUTTON    ;On appelle la sub qui tem
                            porise en écoutant le bouton
0023   0008           00108     RETURN                          ;On retourne après le call
                             de la subroutine 
                      00109     
                      00110 ;Allume toutes les leds
0024                  00111 LIGHT_ON_PORTB
0024   30FF           00112     MOVLW b'11111111'   ;On move le litteral (ici L = b'111111
                            11') dans le W
0025   0086           00113     MOVWF PORTB         ;On met ce qu'il y a dans le W (donc b
                            '11111111') dans PORTB
0026   0008           00114     RETURN              ;On retourne après le call de la subro
                            utine
                      00115 
                      00116 ;Eteint toutes les leds
0027                  00117 LIGHT_OFF_PORTB
0027   3000           00118     MOVLW b'00000000'   ;On move le litteral (ici L = b'000000
                            00') dans le W
0028   0086           00119     MOVWF PORTB         ;On met ce qu'il y a dans le W (donc b
                            '00000000') dans PORTB
0029   0008           00120     RETURN              ;On retourne après le call de la subro
                            utine
                      00121     
                      00122 ;Set à 1 le 1er bit de la variable qui sert à savoir si les le
                            ds doivent blink ou pas    
002A                  00123 SET_IS_LED_BLINKING
002A   3001           00124     MOVLW 0x01              ;On move le Littéral 0x01 dans le 
                            W
002B   00A0           00125     MOVWF IS_LED_BLINKING   ;On met ce qu'il y a dans le W (0x
                            01) dans Is_Led_Blinking
002C   0008           00126     RETURN                  ;On retourne après le call de la s
                            ubroutine
                      00127     
                      00128 ;Clear le 1er bit de la variable qui sert à savoir si les leds
                             doivent blink ou pas
002D                  00129 CLEAR_IS_LED_BLINKING
002D   3000           00130     MOVLW 0x00              ;On move le Littéral 0x00 dans le 
                            W
002E   00A0           00131     MOVWF IS_LED_BLINKING   ;On met ce qu'il y a dans le W (0x
                            00) dans Is_Led_Blinking
002F   0008           00132     RETURN                  ;On retourne après le call de la s
                            ubroutine
                      00133     
                      00134 ;Piège l'execution dans une boucle afin d'attendre que le bout
                            on RA0 soit relaché
MPASM 5.87                          MAIN.ASM   10-14-2021  22:59:33         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0030                  00135 BOUNCING_BUTTON_SECURITY_RA0
0030   1805           00136     BTFSC PORTA,RA0                     ;si les bits de PORTA=
                            0 on skip l'instruction suivante immédiate 
0031   2???           00137     GOTO BOUNCING_BUTTON_SECURITY_RA0   ;On revient au début d
                            e la subroutine si PORTA=1
0032   0008           00138     RETURN                              ;On retourne après le 
                            call de la subroutine
                      00139     
                      00140 ;Piège l'execution dans une boucle afin d'attendre que le bout
                            on RA1 soit relaché    
0033                  00141 BOUNCING_BUTTON_SECURITY_RA1
0033   1885           00142     BTFSC PORTA,RA1                     ;si les bits de PORTA=
                            0 on skip l'instruction suivante immédiate 
0034   2???           00143     GOTO BOUNCING_BUTTON_SECURITY_RA1   ;On revient au début d
                            e la subroutine si PORTA=1
0035   0008           00144     RETURN                              ;On retourne après le 
                            call de la subroutine
                      00145     
                      00146 ;Boucle de check du bouton entrecoupée de délais répétée 0x20 
                            fois
                      00147 ;La vraie utilité de cette sub est de check le bouton pendant 
                            qu'on attend l'exécution du delay
                      00148 ;On appelle plein de fois le petit delay(et on check le bouton
                             entre chaque), ce qui en fait un gros delay
0036                  00149 DELAY_WITH_CHECK_BUTTON
0036   3020           00150     MOVLW 0x20                              ;On met le Littera
                            l 0x20 dans W
0037   00A3           00151     MOVWF NB_BUTTON_CHECK                   ;On met ce qu'il y
                             a dans le W dans nb_button_check
0038                  00152 DELAY_WITH_CHECK_BUTTON_0                   
0038   0BA3           00153     DECFSZ NB_BUTTON_CHECK,f                ;On décrémente f e
                            t on skip l'instruction suivante quand f=0
0039   2???           00154     GOTO DELAY_WITH_CHECK_BUTTON_CHECK      ;On va ici si f !=
                            0
003A   0008           00155     RETURN                                  ;Return là où on c
                            all la subroutine
003B                  00156 DELAY_WITH_CHECK_BUTTON_CHECK
003B   2???           00157     CALL DELAY                              ;On appelle l'autr
                            e delay, en gros on a un décompte dans le décompte
003C   2???           00158     CALL CHECK_RA0                          ;On écoute le bout
                            on RA0
003D   2???           00159     CALL SHUT_THE_FUCK_UP                   ;On écoute le bout
                            on RA1
003E   2???           00160     GOTO DELAY_WITH_CHECK_BUTTON_0          ;boucle sur la lig
                            ne correspondante
                      00161     
                      00162 ;Delay subroutine
003F                  00163 DELAY
003F   30E7           00164     MOVLW       0xE7
0040   00A1           00165     MOVWF       d1
0041   3004           00166     MOVLW       0x04
0042   00A2           00167     MOVWF       d2
0043                  00168 DELAY_0
0043   0BA1           00169     DECFSZ      d1, f
MPASM 5.87                          MAIN.ASM   10-14-2021  22:59:33         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0044   2???           00170     GOTO        $+2
0045   0BA2           00171     DECFSZ      d2, f
0046   2???           00172     GOTO        DELAY_0
0047   2???           00173     GOTO        $+1
0048   0008           00174     RETURN
Warning[205]: Found directive in column 1. (END)
3FF2                  00175 END
MPASM 5.87                          MAIN.ASM   10-14-2021  22:59:33         PAGE  7


SYMBOL TABLE
  LABEL                             VALUE 

BLINK_ALL_LEDS_ONCE               0000001F
BOUNCING_BUTTON_SECURITY_RA0      00000030
BOUNCING_BUTTON_SECURITY_RA1      00000033
Button_RB1_PRESSED                b'00000000'
Button_RB1_RELEASED               b'00000001'
C                                 00000000
CHECK_RA0                         0000000E
CLEAR_IS_LED_BLINKING             0000002D
DC                                00000001
DELAY                             0000003F
DELAY_0                           00000043
DELAY_WITH_CHECK_BUTTON           00000036
DELAY_WITH_CHECK_BUTTON_0         00000038
DELAY_WITH_CHECK_BUTTON_CHECK     0000003B
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
F                                 00000001
FSR                               00000004
GIE                               00000007
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
IS_LED_BLINKING                   00000020
LIGHT_OFF_PORTB                   00000027
LIGHT_ON_PORTB                    00000024
MAIN                              00000009
NB_BUTTON_CHECK                   00000023
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RB0                               00000000
RB1                               00000001
RB2                               00000002
MPASM 5.87                          MAIN.ASM   10-14-2021  22:59:33         PAGE  8


SYMBOL TABLE
  LABEL                             VALUE 

RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
RP1                               00000006
SET_IS_LED_BLINKING               0000002A
SHUT_THE_FUCK_UP                  00000019
START                             00000000
START_LED_BLINKING                00000012
STATUS                            00000003
STOP_LED_BLINKING                 00000015
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_.org_0_0044                      00000044
_.org_0_0047                      00000047
_CONFIG                           00002007
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
MPASM 5.87                          MAIN.ASM   10-14-2021  22:59:33         PAGE  9


SYMBOL TABLE
  LABEL                             VALUE 

_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001
d1                                00000021
d2                                00000022
led1_OFF                          b'00000000'
led1_ON                           b'11111111'

Errors   :     0
Warnings :     1 reported,     0 suppressed
Messages :     0 reported,     2 suppressed

